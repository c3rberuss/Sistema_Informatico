/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import servicios.Venta;
import servicios.Ventana;
import sistema.Sistema;

/**
 *
 * @author edwin
 */
public class Carrito extends javax.swing.JDialog implements Ventana{

    public SpinnerNumberModel getModelo_spinner() {
        return modelo_spinner;
    }

    public void setModelo_spinner(SpinnerNumberModel modelo_spinner) {
        this.modelo_spinner = modelo_spinner;
    }
    
    //variables de movimiento de ventanas
    int x, y;

    public DatosFactura getFacturacion() {
        return facturacion;
    }

    public void setFacturacion(DatosFactura facturacion) {
        this.facturacion = facturacion;
    }

    /**
     * @return the readyAdd
     */
    public boolean isReadyAdd() {
        return readyAdd;
    }

    /**
     * @param readyAdd the readyAdd to set
     */
    public void setReadyAdd(boolean readyAdd) {
        this.readyAdd = readyAdd;
    }

    /**
     * @return the edit
     */
    public boolean isEdit() {
        return edit;
    }

    /**
     * @param edit the edit to set
     */
    public void setEdit(boolean edit) {
        this.edit = edit;
    }

    private boolean add;

    private boolean edit;
    private boolean readyAdd;
    public Venta venta;
    private DatosFactura facturacion;
    private SpinnerNumberModel modelo_spinner;
    
    public Carrito(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        venta = Sistema.getFactory().venta();
        initComponents();
        this.setLocationRelativeTo(null);
        setModelo_spinner(Sistema.getFactory().modeloSpinner());
        venta.cargarDatos(LblTotal, Resultados);
        setFacturacion(Sistema.getFactory().facturacion(null, true));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PopMenu = new javax.swing.JPopupMenu();
        elimnarItem = new javax.swing.JMenuItem();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        BtnLimpiar = new javax.swing.JButton();
        BtnFacturar = new javax.swing.JButton();
        BtnCancelar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        TxtProducto = new javax.swing.JTextField();
        TxtPrecio = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Resultados = new javax.swing.JTable();
        LblTotal = new javax.swing.JLabel();
        txtEfectivo = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        sCantidad = new javax.swing.JSpinner();
        BtnAgregar = new javax.swing.JButton();
        txtId = new javax.swing.JFormattedTextField();

        elimnarItem.setText("Eliminar Producto");
        elimnarItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                elimnarItemMousePressed(evt);
            }
        });
        PopMenu.add(elimnarItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBackground(new java.awt.Color(3, 19, 27));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        jPanel5.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel5MouseDragged(evt);
            }
        });
        jPanel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel5MousePressed(evt);
            }
        });
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/imagenes/carritoCompra.png"))); // NOI18N
        jLabel1.setText("CARRITO DE COMPRA");
        jPanel5.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 620, -1));

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 630, 60));

        jPanel6.setBackground(new java.awt.Color(3, 19, 27));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BtnLimpiar.setBackground(new java.awt.Color(51, 51, 51));
        BtnLimpiar.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        BtnLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        BtnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/imagenes/escoba.png"))); // NOI18N
        BtnLimpiar.setText("LIMPIAR TABLA");
        BtnLimpiar.setToolTipText("limpiar la tabla de articulos");
        BtnLimpiar.setBorder(null);
        BtnLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BtnLimpiar.setFocusPainted(false);
        BtnLimpiar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                BtnLimpiarMousePressed(evt);
            }
        });
        jPanel6.add(BtnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 110, 30));

        BtnFacturar.setBackground(new java.awt.Color(0, 102, 0));
        BtnFacturar.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        BtnFacturar.setForeground(new java.awt.Color(255, 255, 255));
        BtnFacturar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/imagenes/facturar.png"))); // NOI18N
        BtnFacturar.setText("FACTURAR");
        BtnFacturar.setToolTipText("Facturar los articulos agregados");
        BtnFacturar.setBorder(null);
        BtnFacturar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BtnFacturar.setFocusPainted(false);
        BtnFacturar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnFacturarActionPerformed(evt);
            }
        });
        jPanel6.add(BtnFacturar, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, 90, 30));

        BtnCancelar.setBackground(new java.awt.Color(153, 0, 0));
        BtnCancelar.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        BtnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        BtnCancelar.setText("CERRAR");
        BtnCancelar.setBorder(null);
        BtnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BtnCancelar.setFocusPainted(false);
        BtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCancelarActionPerformed(evt);
            }
        });
        jPanel6.add(BtnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 10, 70, 30));

        getContentPane().add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 550, 630, 50));

        jPanel2.setBackground(new java.awt.Color(35, 48, 54));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("PRODUCTO:");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, -1, -1));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("EFECTIVO: $");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 450, 360, -1));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("CANTIDAD:");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 20, -1, -1));

        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("ID:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        TxtProducto.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        TxtProducto.setForeground(new java.awt.Color(0, 0, 0));
        TxtProducto.setToolTipText("Nombre de producto");
        TxtProducto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        TxtProducto.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TxtProducto.setEnabled(false);
        jPanel2.add(TxtProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, 200, 20));

        TxtPrecio.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        TxtPrecio.setForeground(new java.awt.Color(0, 0, 0));
        TxtPrecio.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        TxtPrecio.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TxtPrecio.setEnabled(false);
        jPanel2.add(TxtPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 40, 70, 20));

        Resultados.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Resultados.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        Resultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        Resultados.setComponentPopupMenu(PopMenu);
        Resultados.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Resultados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ResultadosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Resultados);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 570, 310));

        LblTotal.setFont(new java.awt.Font("Century Gothic", 0, 20)); // NOI18N
        LblTotal.setForeground(new java.awt.Color(255, 255, 255));
        LblTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        LblTotal.setText("0000000");
        LblTotal.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel2.add(LblTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 400, 460, 30));

        txtEfectivo.setBackground(new java.awt.Color(35, 48, 54));
        txtEfectivo.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        txtEfectivo.setForeground(new java.awt.Color(255, 255, 255));
        txtEfectivo.setToolTipText("Efectivo");
        txtEfectivo.setBorder(null);
        txtEfectivo.setCaretColor(new java.awt.Color(255, 255, 255));
        txtEfectivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEfectivoActionPerformed(evt);
            }
        });
        jPanel2.add(txtEfectivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 450, 110, 20));

        jSeparator2.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 470, 110, 10));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("PRECIO:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 20, 50, -1));

        sCantidad.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        sCantidad.setModel(new javax.swing.SpinnerNumberModel(0, 0, 0, 0));
        sCantidad.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        sCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sCantidadKeyPressed(evt);
            }
        });
        jPanel2.add(sCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 40, 70, 20));

        BtnAgregar.setBackground(new java.awt.Color(0, 102, 0));
        BtnAgregar.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        BtnAgregar.setForeground(new java.awt.Color(255, 255, 255));
        BtnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/imagenes/addSuperPequenho.png"))); // NOI18N
        BtnAgregar.setText("AGREGAR");
        BtnAgregar.setToolTipText("Agregar a carrito");
        BtnAgregar.setBorder(null);
        BtnAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BtnAgregar.setFocusPainted(false);
        BtnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAgregarActionPerformed(evt);
            }
        });
        jPanel2.add(BtnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 40, 90, 20));

        txtId.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtId.setForeground(new java.awt.Color(0, 0, 0));
        try {
            txtId.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtIdKeyPressed(evt);
            }
        });
        jPanel2.add(txtId, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 90, 20));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 630, 490));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_BtnCancelarActionPerformed

    
    private void add(){
        if(!isAdd()){
               try {
                    
                    String consulta = this.txtId.getText();
                    ResultSet rs = venta.buscarItem(consulta);

                    if(rs.first()){
                        rs.beforeFirst();
                        while(rs.next()){
                            
                            this.TxtProducto.setText(rs.getString(2));
                            this.TxtPrecio.setText(rs.getString(3));
                            getModelo_spinner().setMaximum(rs.getInt(4));
                            getModelo_spinner().setMinimum(1);
                            getModelo_spinner().setStepSize(1);
                            getModelo_spinner().setValue(1);
                            this.sCantidad.setModel(getModelo_spinner());
                            
                            String[] producto = new String[3];
                            
                            producto[0] = rs.getString(1);
                            producto[1] = String.valueOf(rs.getInt(4));
                            producto[2] = "0";
                            
                            venta.arrayAdd(producto);
                            
                        }
                        this.setAdd(true);
                        this.sCantidad.requestFocus();

                    }else{
                        this.setAdd(false);
                        JOptionPane.showMessageDialog(this, "No se encontró ninguna coincidencia");
                        limpiar("");
                    }

               
                } catch (SQLException ex) {
                    this.setAdd(false);
                    this.setEdit(false);
                    JOptionPane.showMessageDialog(this, "Excepcion");
                    Logger.getLogger(Carrito.class.getName()).log(Level.SEVERE, null, ex);
                }
               
           }else{
               
                int cantidad = venta.buscarCantidadAgregada(this.txtId.getText()) + 
                          Integer.valueOf(this.sCantidad.getValue().toString());
                  
                  int stock = venta.buscarStock(this.txtId.getText());
              
                  
                  if(cantidad <= stock){
                      
                      cantidad =  Integer.valueOf(this.sCantidad.getValue().toString());
                      venta.actualizarCantidadAgregada(this.txtId.getText(), String.valueOf(cantidad));
                      
                      cantidad = venta.buscarCantidadAgregada(this.txtId.getText());
                      
                      venta.actualizarItem(cantidad, this.txtId.getText());

                      
                      this.add = false;
                      limpiar("");
                      this.txtId.requestFocus();
                      //cargarDatos();
                      venta.cargarDatos(LblTotal, Resultados);
                      enableOrDisable(true); 
                      
                  }else{
                        Sistema.getMostrarMensaje().mensaje("advertencia", 
                            "Productos insuficientes.", 
                            "Ventas");
                  }
               
            }
    }
    
    
    private void ResultadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ResultadosMouseClicked
        int fila = this.Resultados.rowAtPoint(evt.getPoint());
        
        if(fila > -1){
            
            this.BtnAgregar.setText("MODIFICAR");
            String id_ = this.Resultados.getValueAt(fila, 0).toString();
            this.txtId.setText(String.valueOf(this.Resultados.getValueAt(fila, 0)));
            this.TxtProducto.setText(String.valueOf(this.Resultados.getValueAt(fila, 1)));
            this.TxtPrecio.setText(String.valueOf(this.Resultados.getValueAt(fila, 2)));
            this.sCantidad.setValue(Integer.valueOf(this.Resultados.getValueAt(fila, 3).toString()));
            
            getModelo_spinner().setMaximum(venta.buscarStock(id_));
            getModelo_spinner().setMinimum(1);
            getModelo_spinner().setStepSize(1);
            getModelo_spinner().setValue(Integer.valueOf(this.Resultados.getValueAt(fila, 3).toString()));
            this.sCantidad.setModel(getModelo_spinner());
            this.sCantidad.requestFocus();
            
            enableOrDisable(false);
            setAdd(true);
            setEdit(true);

        }
    }//GEN-LAST:event_ResultadosMouseClicked

    private void BtnLimpiarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnLimpiarMousePressed
        venta.vaciarCarrito();
        //cargarDatos();
        venta.cargarDatos(LblTotal, Resultados);
        Sistema.setProductosAgregados(Sistema.getFactory().arrayList());
    }//GEN-LAST:event_BtnLimpiarMousePressed

    private void BtnFacturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnFacturarActionPerformed
       
        if(this.Resultados.getRowCount() > 0){
            Double total = Double.valueOf(this.LblTotal.getText().substring(11, this.LblTotal.getText().length()));
            
            if(!this.txtEfectivo.getText().isEmpty() && (total <= Double.valueOf(this.txtEfectivo.getText()))){
                
                System.out.println(Resultados.getSelectedRow());
                
                Double cambio = Double.valueOf(this.txtEfectivo.getText()) - total;
            
                Sistema.getMostrarMensaje().mensaje("exito", 
                    "Efectivo: $"+this.txtEfectivo.getText()+"\n"
                    +"Cambio: $"+String.valueOf(cambio), 
                    "Facturar");
                
                getFacturacion().setLocationRelativeTo(null);
                getFacturacion().setVisible(true);
                
                if(getFacturacion().getVentaExitosa()){
                    venta.registrarVenta(Resultados);
                    venta.descontarExistencias(Resultados);
                    venta.cargarDatos(LblTotal, Resultados);
                    Sistema.setProductosAgregados(Sistema.getFactory().arrayList());
                    limpiar("");
                }
            
            }else{
                Sistema.getMostrarMensaje().mensaje("advertencia", 
                    "Debe ingresar un monto correcto.", 
                    "Facturar");
            }
        }else{
            Sistema.getMostrarMensaje().mensaje("advertencia", 
                    "Aún no ha agregado ningún producto al Carrito.", 
                    "Facturar");
        }
       
    }//GEN-LAST:event_BtnFacturarActionPerformed

    private void elimnarItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_elimnarItemMousePressed
        
        if(this.Resultados.getSelectedRowCount() > 0){
            System.out.println(Resultados.getRowCount());
            limpiar("");
            int fila = this.Resultados.getSelectedRow();
            String id = this.Resultados.getValueAt(fila, 0).toString();
            venta.borrarItem(Resultados, id);
            venta.eliminarProducto(id);
            this.setAdd(false);
            venta.cargarDatos(LblTotal, Resultados);
            this.txtId.requestFocus();
            enableOrDisable(true);
            this.BtnAgregar.setText("AGREGAR");
            
        }else{
            Sistema.getMostrarMensaje().mensaje("advertencia", 
                    "Debe seleccionar el elemento a Eliminar.", 
                    "Venta");
        }
    }//GEN-LAST:event_elimnarItemMousePressed

    private void jPanel5MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel5MouseDragged
       this.setLocation(this.getLocation().x + evt.getX()- x , this.getLocation().y + evt.getY() - y );
    }//GEN-LAST:event_jPanel5MouseDragged

    private void jPanel5MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel5MousePressed
        x = evt.getX();
        y = evt.getY();
    }//GEN-LAST:event_jPanel5MousePressed

    private void sCantidadKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sCantidadKeyPressed
       
        int minimo = (int) getModelo_spinner().getMinimum(), 
            maximo = (int) getModelo_spinner().getMaximum(),
            valor = Integer.valueOf(this.sCantidad.getValue().toString());
        
        if(isAdd() && (valor >= minimo || valor <= maximo)){
          
            if(evt.getKeyCode() == KeyEvent.VK_ENTER){
              
              if(venta.buscarCantidadAgregada(this.txtId.getText()) == 0){
                  
                  venta.insertarItem(this.txtId.getText(), this.TxtProducto.getText(),
                      Double.valueOf(this.TxtPrecio.getText()), valor);
                  
                  venta.actualizarCantidadAgregada(this.txtId.getText(), this.sCantidad.getValue().toString());
                  System.out.println("Se está insertando desde aquí :'v");
                  this.add = false;
                  limpiar("");
                  this.txtId.requestFocus();
                  //cargarDatos();
                  venta.cargarDatos(LblTotal, Resultados);
                  enableOrDisable(true);
                  
              }else{
                  
                  int cantidad = venta.buscarCantidadAgregada(this.txtId.getText()) + 
                          Integer.valueOf(this.sCantidad.getValue().toString());
                  
                  int stock = venta.buscarStock(this.txtId.getText());
              
                  
                  if(cantidad <= stock){
                      
                      cantidad =  Integer.valueOf(this.sCantidad.getValue().toString());
                      venta.actualizarCantidadAgregada(this.txtId.getText(), String.valueOf(cantidad));
                      
                      cantidad = venta.buscarCantidadAgregada(this.txtId.getText());
                      
                      venta.actualizarItem(cantidad, this.txtId.getText());

                      
                      this.add = false;
                      limpiar("");
                      this.txtId.requestFocus();
                      //cargarDatos();
                      venta.cargarDatos(LblTotal, Resultados);
                      enableOrDisable(true); 
                      
                  }else{
                        Sistema.getMostrarMensaje().mensaje("advertencia", 
                            "Productos insuficientes.", 
                            "Ventas");
                  }
                  
              }
                            
                   
          } 
       }else if(evt.getKeyCode() == KeyEvent.VK_ENTER){  
           
               venta.actualizarItem(valor, this.txtId.getText());
               venta.actualizarCantidadAgregada(this.txtId.getText(), String.valueOf(valor));
               
               this.setAdd(false);
               limpiar("");
               this.txtId.requestFocus();
              venta.cargarDatos(LblTotal, Resultados);
               enableOrDisable(true);
 
          
        }
    }//GEN-LAST:event_sCantidadKeyPressed

    private void txtEfectivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEfectivoActionPerformed
       BtnFacturarActionPerformed(evt);
    }//GEN-LAST:event_txtEfectivoActionPerformed

    private void BtnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAgregarActionPerformed
        
        if(isEdit()){
            venta.editarCantidadAgregada(this.txtId.getText(), this.sCantidad.getValue().toString());
            venta.actualizarItem(venta.buscarCantidadAgregada(this.txtId.getText()),this.txtId.getText());
            limpiar("");
            venta.cargarDatos(LblTotal, Resultados);
            this.txtId.requestFocus();
            setAdd(false);
            setEdit(false);
            enableOrDisable(true); 
            this.BtnAgregar.setText("AGREGAR");
            
        }else if(isAdd()){
            
             
        int minimo = (int) getModelo_spinner().getMinimum(), 
            maximo = (int) getModelo_spinner().getMaximum(),
            valor = Integer.valueOf(this.sCantidad.getValue().toString());
            
            if((valor >= minimo) && (valor <= maximo)){
                if(venta.buscarCantidadAgregada(this.txtId.getText()) == 0){
                  
                    venta.insertarItem(this.txtId.getText(), this.TxtProducto.getText(),
                        Double.valueOf(this.TxtPrecio.getText()), valor);

                    venta.actualizarCantidadAgregada(this.txtId.getText(), this.sCantidad.getValue().toString());
                    System.out.println("Se está insertando desde aquí :'v");
                    this.add = false;
                    limpiar("");
                    this.txtId.requestFocus();
                    //cargarDatos();
                    venta.cargarDatos(LblTotal, Resultados);
                    enableOrDisable(true);
                  
                }else{

                    int cantidad = venta.buscarCantidadAgregada(this.txtId.getText()) + 
                            Integer.valueOf(this.sCantidad.getValue().toString());

                    int stock = venta.buscarStock(this.txtId.getText());


                    if(cantidad <= stock){

                        cantidad =  Integer.valueOf(this.sCantidad.getValue().toString());
                        venta.actualizarCantidadAgregada(this.txtId.getText(), String.valueOf(cantidad));

                        cantidad = venta.buscarCantidadAgregada(this.txtId.getText());

                        venta.actualizarItem(cantidad, this.txtId.getText());


                        this.add = false;
                        limpiar("");
                        this.txtId.requestFocus();
                        //cargarDatos();
                        venta.cargarDatos(LblTotal, Resultados);
                        enableOrDisable(true); 

                    }else{
                          Sistema.getMostrarMensaje().mensaje("advertencia", 
                              "Productos insuficientes.", 
                              "Ventas");
                    }

                }
            }
        }
        
    }//GEN-LAST:event_BtnAgregarActionPerformed

    private void txtIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdKeyPressed
      
            
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){

            add();

        }else if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            limpiar("");
            this.setAdd(false);
        }
            
       
        
    }//GEN-LAST:event_txtIdKeyPressed

        /**
     * @return the add
     */
    public boolean isAdd() {
        return add;
    }

    /**
     * @param add the add to set
     */
    public void setAdd(boolean add) {
        this.add = add;
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Carrito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Carrito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Carrito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Carrito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            Carrito dialog = new Carrito(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAgregar;
    private javax.swing.JButton BtnCancelar;
    private javax.swing.JButton BtnFacturar;
    private javax.swing.JButton BtnLimpiar;
    private javax.swing.JLabel LblTotal;
    private javax.swing.JPopupMenu PopMenu;
    private javax.swing.JTable Resultados;
    private javax.swing.JTextField TxtPrecio;
    private javax.swing.JTextField TxtProducto;
    private javax.swing.JMenuItem elimnarItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSpinner sCantidad;
    private javax.swing.JTextField txtEfectivo;
    private javax.swing.JFormattedTextField txtId;
    // End of variables declaration//GEN-END:variables

    @Override
    public void limpiar(String lugar) {
        this.txtId.setText("");
        this.TxtPrecio.setText("");
        this.TxtProducto.setText("");
        this.txtEfectivo.setText("");
        this.txtId.requestFocus();
        this.sCantidad.getModel().setValue(0);
    }
    
    
    private void enableOrDisable(boolean type){
        if(type){
            this.txtId.enable();
            this.TxtPrecio.enable();
            this.TxtProducto.enable();
        }
        else{
            this.TxtPrecio.disable();
            this.txtId.disable();
            this.TxtProducto.disable();
        }
    }
}
